#+BEGIN_HTML
---
layout: post
keywords: 
description: 
title: python操作MySQL数据库 
categories: [python, 数据库]
tags: [python, mysql]
group: archive
icon: globe
featured: false
---
#+END_HTML

#+OPTIONS: ^:{}
* 安装mysqldb
#+BEGIN_SRC sh
# -*- coding: UTF-8 -*-
#ubuntu下
sudo apt-get install python-mysqldb
#+END_SRC
* 示例
#+BEGIN_SRC python
#获取keystone数据库user表，指定id的用户的用户名
import MySQLdb
import MySQLdb.cursors

try:
    con = MySQLdb.connect(host='localhost', user='root', passwd='123456', port=3306, cursorclass = MySQLdb.cursors.DictCursor)
    cur = conn.cursor()
    con.select_db('keystone')
    sql = "select * from user where id  = '17a294a7a66c456a94c1c8a5e29eceac'"
    cur.execute(sql)
    result = cur.fetchone()
    if result != None:
        result = result[dst]
    cur.close()
    con.close()
    print result

except MySQLdb.Error,e:
    print "Mysql Error"
#+END_SRC
操作流程：导入模块，建立链接，执行sql语句，获取结果。
* 获取mysql版本
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

try:
    #连接mysql的方法：connect('ip','user','password','dbname')
    con = MySQLdb.connect(host='localhost', user='root',
        passwd='root', db='test');

    #所有的查询，都在连接con的一个模块cursor上面运行的,获取操作游标
    cur = con.cursor()

    #执行一个查询
    cur.execute("SELECT VERSION()")

    #取得上个查询的结果，是单个结果
    data = cur.fetchone()
    print "Database version : %s " % data
finally:
    if con:
        #无论如何，连接记得关闭
        con.close()
#+END_SRC
* 创建表并插入数据
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

#连接数据库
con = MySQLdb.connect(host='192.168.60.107', user='root',
        passwd='123456')
#获取连接的cursor，只有获取了cursor，我们才能进行各种操作
cur = con.cursor()
#创建一个数据库vm_db.  
cur.execute("create database if not exists vm_db")
#进入vm_db
con.select_db('vm_db');
#创建表vms
cur.execute("create table vms(name varchar(20), id int)")
#vms表插入记录
cur.execute("insert into vms values('vm1', 1)")
cur.execute("insert into vms values('vm2', 2)")
#插入多条
values=[]
for i in range(3, 20):
    values.append(('vm' + str(i), i))

cur.executemany('insert into vms values(%s,%s)', values)
#必须用con.commit()来提交事务，不然不能真正插入数据
con.commit()
cur.close()
con.close()
#+END_SRC
* 查询
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

con = MySQLdb.connect(host='192.168.60.107', user='root',
        passwd='123456')
cur = con.cursor()
con.select_db('vm_db')
count = cur.execute('select * from vms')
print '共有 %s 条记录' % count

#获取一条记录，作为元组返回
print '获取一条记录'
result = cur.fetchone()
print result
print 'name:%s id:%s' % result

#获取5条记录，注意由于之前执行有了fetchone()，所以游标已经指到第二条记录了，也就是从第二条开始的所有记录  
print "获取5条记录:"  
results = cur.fetchmany(5)  
for r in results:  
    print r  

print "获取所有结果:"  
#重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,  
cur.scroll(0, mode='absolute')
#获取所有结果，将结果集(多维元组)存入results
results = cur.fetchall()  
for r in results:  
    print r

#不按元组打印
cur.scroll(0, mode='absolute')
#使用cur.rowcount获取结果集的条数
numrows = int(cur.rowcount)
#循环numrows次，每次取出一行数据
for i in range(numrows):
    #每次取出一行，放到row中，这是一个元组(id,name)
    row = cur.fetchone()
    #直接输出两个元素
    print row[0], row[1]
  
cur.close()
con.close()
#+END_SRC
+ numrows = int(cur.rowcount)用于获取结果集的数目
+ row = cur.fetchone()每次取出一行数据，同时记录集的指针执行下一行
* 使用字典cursor取得结果集（可以使用表字段名字访问值）
MySQLdb实现了多种cursor类，默认的cursor以元组的形式返回数据，而字典cursor以字典形式返回数据，便于进行与字段名有关的操作。
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

con = MySQLdb.connect(host='192.168.60.107', user='root',
    passwd='123456')
#获取字典cursor
cur = con.cursor(MySQLdb.cursors.DictCursor)
con.select_db('vm_db')

#获取前10条记录结果集合，rows是元组，元素是字典
cur.execute('select * from vms limit 10')
rows = cur.fetchall()
for row in rows:
    print row['name'], row['id']
#+END_SRC
示例代码中即是用的字典cursor
* 更新数据
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

con = MySQLdb.connect(host='192.168.60.107', user='root',
    passwd='123456')

cur = con.cursor()
con.select_db('vm_db')
cur.execute("update vms set name = 'testvm' where id = '10'")
#提交
con.commit()

cur.close()
con.close()
#+END_SRC
* 删除数据
#+BEGIN_SRC python
# -*- coding: UTF-8 -*-
import MySQLdb

con = MySQLdb.connect(host='192.168.60.107', user='root',
    passwd='123456')

cur = con.cursor()
con.select_db('vm_db')
cur.execute("delete from vms where id > '10'")
#提交
con.commit()

cur.close()
con.close()
#+END_SRC
* 常用函数
+ cur.fetchone() 获取下一条记录，并将游标下移一位
+ cur.fetchall() 获取全部记录,游标移到最后
+ cur.rowcount 获取记录条数,不受游标位置影响
+ cur.fetchmany(size=None) 接收size条返回结果行
+ cur.scroll(value,mode='relative') 移动指针到某一行.如果mode='relative',则表示从当前所在行移动value条,如果 mode='absolute',则表示从结果集的第一行移动value条.
+ con.commit() 提交修改，不可撤销
+ con.rollback() 会滚，撤销前面的所有操作(已经commit的操作无法撤销)
+ con.close() 关闭连接
* 参考
[[http://www.tutorialspoint.com/python/python_database_access.htm][Python MySQL Database Access(很好的手册)]] \\
[[http://zetcode.com/db/mysqlpython/][MySQL Python tutoril]] \\
[[http://www.crazyant.net/686.html][Python操作Mysql实例代码教程（查询手册）]] \\
[[http://www.iteye.com/topic/573092][用Python操作Mysql]] \\
[[http://www.cnblogs.com/rollenholt/archive/2012/05/29/2524327.html][python操作MySQL数据库]] \\
[[http://m114.org/python-mysqldb-return-dict/][Python MySQLdb 查询返回字典结构]]
