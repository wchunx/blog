#+BEGIN_HTML
---
layout: post
keywords: 
description: 
title: diff和patch的用法 
categories: [linux]
tags: [linux,diff,patch]
group: archive
icon: code
featured: false
---
#+END_HTML
#+OPTIONS: ^:{}
* 概括介绍
diff和patch是一对工具，在数学上来说，diff是对两个集合的差运算，patch是对两个集合的和运算。

diff比较两个文件或文件集合的差异，并记录下来，生成一个diff文件，这也是我们常说的patch文件，即补丁文件。

patch能将diff文件运用于原来的两个集合之一，从而得到另一个集合。举个例子来说文件A和文件B,经过diff之后生成了补丁文件C,那么着个过程相当于A-B=C,那么patch的过程就是B+C=A或A-C=B。因此我们只要能得到A, B, C三个文件中的任何两个，就能用diff和patch这对工具生成另外一个文件。
* 具体用法
** diff
diff后面可以接两个文件也可以是两个目录。如果是一个目录名加一个文件名，那么只作用在那么个目录下的同名文件。如果是两个目录的话，作用于该目录下的所有文件，不递归。如果我们希望递归执行，需要使用-r参数。
*** 命令格式
**** diff [命令行选项] 原始文件 新文件
**** 常用选项
+ -N :: patch里包含新文件，表示如果某个文件仅在一个目录中出现，则假定其在另一个目录中为空文件
+ -u :: 输出统一格式(unified format)　　　
+ -a :: patch里可以包含二进制文件
+ -r :: 递归处理目录 　　　　
命令diff A B > C ,一般A是原始文件，B是修改后的文件，C称为A的补丁文件。
** patch
patch用于根据原文件和补丁文件生成目标文件。尽管并没有指定patch和diff的关系，但通常patch都使用diff的结果来完成打补丁的工作
*** 命令格式
**** patch [options] [originalfile] [patchfile]
如果patchfile为空则从标准输入读取patchfile内容；如果originalfile也为空，则从patchfile（肯定来自标准输入）中读取需要打补丁的文件名

以上面的例子 diff -Nuar A B > C

patch A C A的内容变成了B(打补丁)

patch -R A C A还原成原来的内容.过程中文件名不发生变化，文件内容变化

其实patch文件中记录了原文件的路径和名称，所以打补丁时可以省略源文件。 注意如果要简写patch命令，diff时必须加-u才行。

打补丁：patch < C

还原：patch -R < C
*** 路径问题
/home/wchunx/ \\
-dir1/genernal/hello.txt \\
-dir2/gernel/hello.txt \\
-dir.patch 
在/home/wchunx下执行diff -Nuar dir1 dir2 > dir.patch

源文件与目标文件不在同一目录，这时候就需要用patch -p[num]

-p参数决定了是否使用读出的源文件名的前缀目录信息，不提供-p参数，则忽略所有目录信息，-p0（或者-p 0）表示使用全部的路径信息，-p1将忽略第一个"/"以前的目录，依此类推。
#+BEGIN_SRC sh
#patch文件记录的信息
wchunx@wchunx:~$ cat dir.patch
diff -Nuar dir1/gernel/hello.txt dir2/gernel/hello.txt
— dir1/gernel/hello.txt 2013-09-29 10:38:00.042518181 +0800
+++ dir2/gernel/hello.txt   2013-09-29 10:38:09.362517972 +0800
@@ -1 +1 @@
-aaa
+bbb
 
#使用全路径打补丁
patch -p0 < dir.patch
patching file dir1/gernel/hello.txt
 
#此时如果再次使用该命令，系统询问是否还原
#patch -p0 < dir.patch
#patching file dir1/gernel/hello.txt
#Reversed (or previously applied) patch detected!  Assume -R? [n] y
#还原，同上步中注释的操作
 
patch -R -p0 < dir.patch
patching file dir1/gernel/hello.txt
 
#改变一下当前路径
cd dir1
#这个时候就不能使用dir.patch记录的源文件全路径dir1/gernel/hello.txt了，应该忽略第一个/前的dir1，这也就是下面命令中p1的含义
patch -p1 < ../dir.patch
patching file gernel/hello.txt
#+END_SRC 
实际使用diff和patch时，用diff -Nuar ... ... 的习惯打法，打补丁时先看一下补丁中的大致内容，简写patch命令的话，结合当前路径确定需要跳过几级目录。
* patch文件结构
#+BEGIN_SRC sh
cat test1
11111
11111
11111
cat test2
22222
22222
22222
diff -Nuar test1 test2 > test.patch
cat test.patch 
--- test1	2013-10-31 11:14:22.005509793 +0800
+++ test2	2013-10-31 11:16:49.889506303 +0800
@@ -1,3 +1,3 @@
+22222
 11111
-11111
-11111
+22222
#+END_SRC
** 补丁头
补丁头是分别由---/+++开头的两行，用来表示要打补丁的文件。---开头表示旧文件，+++开头表示新文件。并记录了这两个文件的首次创建时间。

一个补丁文件中可能包含以---/+++开头的很多节，每一节用来打一个补丁。所以在一个补丁文件中可以包含好多个补丁。
** 块
块是补丁中要修改的地方。以@@开始，结束于另一个块的开始。块内通常由一部分不用修改的东西开始和结束。他们只是用来表示要修改的位置。
块会缩进一列,而这一列是用来表示这一行是要增加还是要删除的。

+号表示这一行是要加上的。\\
-号表示这一行是要删除的。\\
没有加号也没有减号表示这里只是引用的而不需要修改。

@@ -1,3 +1,3 @@ -1，3表示从原文件的第1行开始，共3行，+1，3表示从新文件的第一行开始，共3行。\\
+22222表示原文件里无这一行，新文件中要加上。\\
-11111表示原文件中有这一行，新文件中要删除。
* 参考资料
[[http://www.ibm.com/developerworks/cn/linux/l-diffp/][用Diff和Patch工具维护源码]]

